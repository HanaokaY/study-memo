# Rubyの定数探索は主に二つの観点から行われます。

# 一つ目がレキシカルスコープで、Rubyはクラスやモジュールをネストすると、
# Ruby内部のnd_nextポインタを一つ外側のクラスに設定します。
# そして、定数探索の時はそのnd_nextポインタを辿って定数探索の解決をします。

# 二つ目はスーパークラスチェーンです。各スーパークラスのチェーンを辿って定数解決を行います。

# 重要な優先順位は、
# レキシカルスコープが優先され、その後に、スーパークラスが探索されることになります。
class A
    HOGE = 'A' #=> レキシカルスコープに定数が定義されていなければ、親クラスであるコレが参照される。
end
module B
    HOGE ='B' #=> レキシカルスコープが優先されるためコレが参照される。
    class C < A
        def hoge
            p HOGE
        end
    end
end
# B::C.new.hoge
















